<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "review" >
		<insert id="reviewInsert" parameterType="map">
	    <selectKey keyProperty="temp_review_number" resultType="int" order="BEFORE">
	        SELECT IFNULL(MAX(REVIEW_NUMBER), 0) + 1 as temp_review_number FROM GAJAE.REVIEW
	    </selectKey>
	    INSERT INTO GAJAE.REVIEW (
	        REVIEW_NUMBER,
	        R_NUMBER,
	        REVIEW_TITLE,
	        REVIEW_GOOD,
	        REVIEW_BAD,
	        REVIEW_DATE,
	        REVIEW_PHOTO,
	        REVIEW_SERVICE,
	        REVIEW_FACILITY,
	        REVIEW_CLEAN,
	        REVIEW_LOCATION,
	        REVIEW_COST,
	        REVIEW_AVERAGE
	    ) VALUES (
	        #{temp_review_number},
	        #{R_NUMBER},
	        #{REVIEW_TITLE},
	        #{REVIEW_GOOD},
	        #{REVIEW_BAD},
	        NOW(),
	        #{REVIEW_PHOTO},
	        #{REVIEW_SERVICE},
	        #{REVIEW_FACILITY},
	        #{REVIEW_CLEAN},
	        #{REVIEW_LOCATION},
	        #{REVIEW_COST},
	        #{REVIEW_AVERAGE}
	    )
	</insert>

	 
	 <select id="propertyList" parameterType="java.util.HashMap" resultType="map">
		 SELECT DISTINCT RV.R_NUMBER, RV.USER_ID, RV.R_PEOPLE,
               U.USER_ID, U.USER_NICKNAME, U.USER_PHOTO,
               R.REVIEW_TITLE, R.REVIEW_DATE, R.REVIEW_GOOD, R.REVIEW_BAD, R.REVIEW_PHOTO,
               R.REVIEW_SERVICE, R.REVIEW_FACILITY, R.REVIEW_CLEAN, R.REVIEW_COST,
               R.REVIEW_LOCATION, R.REVIEW_AVERAGE,
               RV.R_START_DATE AS CHECKIN_DATE,
               RV.R_END_DATE AS CHECKOUT_DATE,
               DATEDIFF(STR_TO_DATE(RV.R_END_DATE, '%Y-%m-%d'), STR_TO_DATE(RV.R_START_DATE, '%Y-%m-%d')) AS NUM_NIGHTS,
               RP.REPLY_CONTENT, RP.REPLY_DATE
		  FROM REVIEW R
		 INNER JOIN RESERVATIONS RV ON R.R_NUMBER = RV.R_NUMBER
		 INNER JOIN USERS U ON RV.USER_ID = U.USER_ID
		 INNER JOIN PROPERTIES P ON RV.P_ID = P.P_ID 
		  LEFT JOIN REPLY RP ON R.REVIEW_NUMBER = RP.REVIEW_NUMBER
		 WHERE RV.P_ID =#{P_ID}
	 </select>
	 
	 <!-- 나의 리뷰 리스트  -->
	 <select id="myReviewList" parameterType="java.util.HashMap" resultType="map">
		SELECT DISTINCT R.REVIEW_NUMBER, R.REVIEW_TITLE, R.REVIEW_DATE, R.REVIEW_GOOD, R.REVIEW_BAD, R.REVIEW_PHOTO, R.REVIEW_SERVICE, R.REVIEW_FACILITY, R.REVIEW_CLEAN, R.REVIEW_COST, R.REVIEW_LOCATION, R.REVIEW_AVERAGE,
       					P.P_ID, P.P_TITLE, P.P_PHOTO, RV.R_START_DATE, RV.R_END_DATE,
       					RT.ROOM_TYPE, RT.ROOM_PRICE
		 FROM REVIEW R 
		 JOIN RESERVATIONS RV ON R.R_NUMBER = RV.R_NUMBER 
		 JOIN PROPERTIES P ON RV.P_ID = P.P_ID 
		 JOIN P_ROOMTYPE RT ON RV.ROOM_ID = RT.ROOM_ID
		WHERE RV.USER_ID = #{USER_ID}
		ORDER BY R.REVIEW_NUMBER DESC
	 </select>
	 
	 <!--나의 리뷰 Detail -->
	 <select id="myReviewDetail" parameterType="java.util.HashMap" resultType="map">
	 	SELECT R.REVIEW_NUMBER, R.REVIEW_TITLE, R.REVIEW_GOOD, R.REVIEW_BAD, R.REVIEW_DATE, R.REVIEW_PHOTO,
      		   R.REVIEW_SERVICE, R.REVIEW_FACILITY, R.REVIEW_CLEAN, R.REVIEW_LOCATION, R.REVIEW_COST
		  FROM REVIEW R
		  INNER JOIN RESERVATIONS RS ON R.R_NUMBER = RS.R_NUMBER
		  WHERE R.REVIEW_NUMBER = #{REVIEW_NUMBER}
	 </select>
	 
	 <update id="reviewUpdate" parameterType="map">
	 	UPDATE REVIEW
	 	   SET
	 	   	REVIEW_TITLE = #{REVIEW_TITLE}, 
			REVIEW_GOOD = #{REVIEW_GOOD}, 
			REVIEW_BAD = #{REVIEW_BAD}, 
			REVIEW_DATE =  NOW(), 
			REVIEW_SERVICE = #{REVIEW_SERVICE}, 
			REVIEW_FACILITY =#{REVIEW_FACILITY}, 
			REVIEW_CLEAN = #{REVIEW_CLEAN},
			REVIEW_PHOTO = #{REVIEW_PHOTO}, 
			REVIEW_LOCATION = #{REVIEW_LOCATION},
			REVIEW_COST = #{REVIEW_COST},
			REVIEW_AVERAGE = #{REVIEW_AVERAGE}
	  WHERE REVIEW_NUMBER = #{REVIEW_NUMBER} 	
	 </update>
	 
	 <delete id="reviewDelete" parameterType="map">
	 	DELETE FROM REVIEW
	 	WHERE REVIEW_NUMBER = #{REVIEW_NUMBER}
	 </delete>
	 
	 	 <!--나의 리뷰 Detail -->
	 <select id="hostReviewList" parameterType="java.util.HashMap" resultType="map">
		SELECT DISTINCT  R.REVIEW_NUMBER, R.REVIEW_TITLE, R.REVIEW_DATE, R.REVIEW_GOOD,
			   R.REVIEW_BAD, R.REVIEW_PHOTO, P.P_ID, P.P_TITLE  
		FROM REVIEW R   
		JOIN RESERVATIONS RV ON R.R_NUMBER = RV.R_NUMBER   
		JOIN PROPERTIES P ON RV.P_ID = P.P_ID   
		JOIN HOST H ON P.HOST_BUSINESS_NUM = H.HOST_BUSINESS_NUM   
		WHERE H.HOST_ID = #{HOST_ID}
	 </select>
	 
	 <!-- 댓글 등록  -->
	 <insert id="replyInsert" parameterType="map">
		INSERT INTO REPLY(
			REPLY_NUMBER,
			REVIEW_NUMBER,
			HOST_ID,
			REPLY_CONTENT,
			REPLY_DATE
			) VALUES (
			SEQ_REPLY_NUMBER.NEXTVAL,
			#{REVIEW_NUMBER},
			#{HOST_ID},
			#{REPLY_CONTENT}, 
			 NOW()
			)
	 </insert>
	 
	 <select id="getRepliesByReviewNumber" resultType="com.gajae.demo.dto.ReplyDTO">
	    SELECT REPLY_NUMBER, REVIEW_NUMBER, HOST_ID, REPLY_CONTENT, REPLY_DATE
	    FROM REPLY
	    WHERE REVIEW_NUMBER = #{reviewNumber}
  	</select>
	 
	<update id="hostreplyUpdate" parameterType="map">
	 	UPDATE REPLY
	 	   SET
			REPLY_CONTENT = #{REPLY_CONTENT}, 
			REPLY_DATE =  NOW()
	  WHERE REPLY_NUMBER = #{REPLY_NUMBER} 	
	 </update>
	 <!-- host댓글가져오기 -->
	 <select id="hostreplyList" parameterType="java.util.HashMap" resultType="map">
		SELECT	REPLY_NUMBER, REPLY_CONTENT, HOST_ID, REPLY_DATE, REPLY_EXIST_FLAG
		FROM REPLY 
		WHERE REVIEW_NUMBER = #{REVIEW_NUMBER} 
	 </select>
	 
	<select id="hostReviewDetail" parameterType="java.util.HashMap" resultType="map">		        
		SELECT DISTINCT R.REVIEW_TITLE, R.REVIEW_DATE, R.REVIEW_GOOD, R.REVIEW_BAD, R.REVIEW_PHOTO, P.P_ID, P.P_TITLE
		  FROM REVIEW R
		  JOIN RESERVATIONS RV ON R.R_NUMBER = RV.R_NUMBER
		  JOIN PROPERTIES P ON RV.P_ID = P.P_ID
		 WHERE R.REVIEW_NUMBER = #{REVIEW_NUMBER}
	 </select>
	 
	<delete id="hostReviewDelete" parameterType="map">
	 	DELETE FROM REPLY
	 	WHERE REPLY_NUMBER = #{REPLY_NUMBER}
	</delete>
	</mapper>
